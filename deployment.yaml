---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: role-k8status
  namespace: ${DEPLOY_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: ${TARGET_NAMESPACE}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8status-pod-reader
  namespace: ${TARGET_NAMESPACE}
subjects:
- kind: ServiceAccount
  name: role-k8status
  namespace: ${DEPLOY_NAMESPACE}
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8status
  namespace: ${DEPLOY_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8status
  template:
    metadata:
      labels:
        app: k8status
    spec:
      serviceAccountName: role-k8status
      containers:
      - name: k8status
        image: ${REGISTRY}/${IMAGE_NAME}:${VERSION}
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: proxy-config

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: k8status-service
  namespace: ${DEPLOY_NAMESPACE}
spec:
  selector:
    app: k8status
  ports:
  - protocol: TCP
    port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8status-ingress
  namespace: ${DEPLOY_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: nginx
#  tls:
#  - hosts:
#    - ${DEPLOY_URL}
#    secretName: certs-secret
  rules:
  - host: ${DEPLOY_URL}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: k8status-service
            port:
              number: 8080